name: E2E Tests (Playwright)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build project
      run: npm run build

    - name: Run Playwright tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          playwright-report/
          test-results/
        retention-days: 30

    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-screenshots
        path: test-results/**/*.png
        retention-days: 30

    - name: Post PR comment with screenshots
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs').promises;
          const path = require('path');
          
          // Find screenshot files
          async function findScreenshots(dir) {
            const screenshots = [];
            try {
              const entries = await fs.readdir(dir, { withFileTypes: true });
              for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                  screenshots.push(...await findScreenshots(fullPath));
                } else if (entry.name.endsWith('.png')) {
                  screenshots.push(fullPath);
                }
              }
            } catch (error) {
              console.log(`Could not read directory ${dir}: ${error.message}`);
            }
            return screenshots;
          }
          
          const screenshots = await findScreenshots('test-results');
          
          let commentBody = '## üîç E2E Test Results\n\n';
          commentBody += '‚ùå **E2E tests failed.** Please review the test results and screenshots below.\n\n';
          
          if (screenshots.length > 0) {
            commentBody += '### üì∏ Screenshots\n\n';
            commentBody += `Found ${screenshots.length} screenshot(s) from failed tests:\n\n`;
            
            for (const screenshot of screenshots.slice(0, 5)) { // Limit to 5 screenshots
              const relativePath = screenshot.replace('test-results/', '');
              commentBody += `- \`${relativePath}\`\n`;
            }
            
            if (screenshots.length > 5) {
              commentBody += `- ... and ${screenshots.length - 5} more\n`;
            }
            
            commentBody += '\nüìÅ **All screenshots and test reports are available in the [workflow artifacts]';
            commentBody += `(https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).**\n\n`;
          } else {
            commentBody += '### üì∏ Screenshots\n\nNo screenshots were captured.\n\n';
          }
          
          commentBody += '### üîó Useful Links\n\n';
          commentBody += `- [View full test report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
          commentBody += `- [Download artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n`;
          commentBody += '*This comment was automatically generated by the E2E testing workflow.*';
          
          // Post comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });