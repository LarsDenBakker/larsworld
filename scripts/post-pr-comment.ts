#!/usr/bin/env node

/**
 * Post GitHub PR comment with E2E test results and screenshot links
 * 
 * This script is used by the GitHub Actions workflow to post comments on PRs
 * when E2E tests fail, providing links to screenshots and test artifacts.
 * 
 * Usage: node scripts/post-pr-comment.js [test-results-dir]
 */

import { promises as fs } from 'fs';
import { join, relative } from 'path';

interface ScreenshotInfo {
  path: string;
  relativePath: string;
  testName: string;
}

/**
 * Recursively find all PNG screenshot files in a directory
 */
async function findScreenshots(dir: string): Promise<ScreenshotInfo[]> {
  const screenshots: ScreenshotInfo[] = [];
  
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = join(dir, entry.name);
      
      if (entry.isDirectory()) {
        screenshots.push(...await findScreenshots(fullPath));
      } else if (entry.name.endsWith('.png')) {
        const relativePath = relative('test-results', fullPath);
        const testName = extractTestName(relativePath);
        
        screenshots.push({
          path: fullPath,
          relativePath,
          testName
        });
      }
    }
  } catch (error) {
    console.log(`Could not read directory ${dir}: ${(error as Error).message}`);
  }
  
  return screenshots;
}

/**
 * Extract test name from screenshot file path
 */
function extractTestName(filePath: string): string {
  const parts = filePath.split('/');
  const fileName = parts[parts.length - 1];
  
  // Remove .png extension and attempt to make readable
  return fileName
    .replace('.png', '')
    .replace(/-test-[^-]*$/, '') // Remove test suffixes
    .replace(/[_-]/g, ' ')
    .replace(/\b\w/g, l => l.toUpperCase());
}

/**
 * Generate PR comment body with test results and screenshot information
 */
function generateCommentBody(screenshots: ScreenshotInfo[], runId: string, repo: { owner: string; repo: string }): string {
  let commentBody = '## üîç E2E Test Results\n\n';
  commentBody += '‚ùå **E2E tests failed.** Please review the test results and screenshots below.\n\n';
  
  if (screenshots.length > 0) {
    commentBody += '### üì∏ Screenshots\n\n';
    commentBody += `Found ${screenshots.length} screenshot(s) from failed tests:\n\n`;
    
    // Group screenshots by test name for better organization
    const groupedScreenshots = screenshots.reduce((groups, screenshot) => {
      const testName = screenshot.testName;
      if (!groups[testName]) {
        groups[testName] = [];
      }
      groups[testName].push(screenshot);
      return groups;
    }, {} as Record<string, ScreenshotInfo[]>);
    
    const testNames = Object.keys(groupedScreenshots).slice(0, 5); // Limit to 5 tests
    
    for (const testName of testNames) {
      const testScreenshots = groupedScreenshots[testName];
      commentBody += `**${testName}**\n`;
      
      for (const screenshot of testScreenshots.slice(0, 3)) { // Max 3 screenshots per test
        commentBody += `- \`${screenshot.relativePath}\`\n`;
      }
      
      if (testScreenshots.length > 3) {
        commentBody += `- ... and ${testScreenshots.length - 3} more\n`;
      }
      
      commentBody += '\n';
    }
    
    if (Object.keys(groupedScreenshots).length > 5) {
      const remainingTests = Object.keys(groupedScreenshots).length - 5;
      commentBody += `... and ${remainingTests} more test(s) with screenshots\n\n`;
    }
    
    commentBody += 'üìÅ **All screenshots and test reports are available in the [workflow artifacts]';
    commentBody += `(https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}).**\n\n';
  } else {
    commentBody += '### üì∏ Screenshots\n\nNo screenshots were captured.\n\n';
  }
  
  commentBody += '### üîó Useful Links\n\n';
  commentBody += `- [View full test report](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})\n`;
  commentBody += `- [Download artifacts](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})\n\n`;
  commentBody += '*This comment was automatically generated by the E2E testing workflow.*';
  
  return commentBody;
}

/**
 * Main function - for use in GitHub Actions or standalone
 */
async function main(): Promise<void> {
  try {
    const testResultsDir = process.argv[2] || 'test-results';
    const screenshots = await findScreenshots(testResultsDir);
    
    // When run in GitHub Actions, these environment variables are available
    const runId = process.env.GITHUB_RUN_ID || 'unknown';
    const repoFullName = process.env.GITHUB_REPOSITORY || 'owner/repo';
    const [owner, repo] = repoFullName.split('/');
    
    const commentBody = generateCommentBody(screenshots, runId, { owner, repo });
    
    // Output the comment body for GitHub Actions to use
    console.log('Generated PR comment:');
    console.log('---');
    console.log(commentBody);
    console.log('---');
    
    // If we have GitHub context, we could post directly, but it's better
    // to let GitHub Actions handle the actual posting for permissions
    
  } catch (error) {
    console.error('Error generating PR comment:', (error as Error).message);
    process.exit(1);
  }
}

// Export functions for testing
export { findScreenshots, generateCommentBody, extractTestName };

// Run if called directly
if (process.argv[1] && process.argv[1].endsWith('post-pr-comment.ts')) {
  main().catch(console.error);
}